# -*- coding: utf-8 -*-

"""
BBflight api
author: Ninfeion
"""

import serial
import serial.tools.list_ports
import pygame.joystick
import threading



class serial_recieve(object):
    def __init__(self):
        self._buffer = ''
        self._recieveMode = 'ASCII'
        self._autoNewLine = True
        self._showSend = False
        self._showTheTime = False
        self._recieveSwitch = False
        self.rxByteCount = 0

    def serialRecieveThreading(self):
        pass


    def setRecieveSwitch(self, par):
        if type(par) == bool :
            self._recieveSwitch = par
        else:
            raise TypeError

    def getRecieveSwitch(self):
        return self._recieveSwitch

    def writeBuffer(self, string):
        if type(string) == str:
            self._buffer = string
        else:
            raise TypeError

    def readBuffer(self):
        return self._buffer

    def setRecieveMode(self, mode):
        if mode == ('ASCII') or (mode == 'Hex'):
            self._recieveMode = mode
        else:
            raise TypeError

    def getRecieveMode(self):
        return self._recieveMode

    def setAutoNewLine(self, par):
        if type(par) == bool:
            self._autoNewLine = par
        else:
            raise TypeError

    def isAutoNewLine(self):
        return self._autoNewLine

    def setShowSend(self, par):
        if type(par) == bool:
            self._showSend = par
        else:
            raise TypeError

    def isShowSend(self):
        return self._showSend

    def setShowTheTime(self, par):
        if type(par) == bool:
            self._showTheTime = par
        else:
            raise TypeError

    def isShowTheTime(self):
        return self._showTheTime

class serial_send(object):
    def __init__(self):
        self._buffer = ''
        self._sendMode = 'ASCII'
        self._repeatSend = False
        self._repeatSendPar = 1000
        self._portSwitch = False
        self.txByteCount = 0

    def setSendSwitch(self, par):
        if type(par) == bool:
            self._portSwitch = par
        else:
            raise TypeError

    def getSendSwitch(self):
        return self._portSwitch

    def writeBuffer(self, string):
        if type(string) == str:
            self._buffer = string
        else:
            raise TypeError

    def readBuffer(self):
        return self._buffer

    def setSendMode(self, mode):
        if (mode == 'ASCII') or (mode == 'Hex'):
            self._sendMode = mode
        else:
            raise TypeError

    def getSendMode(self):
        return self._sendMode

    def setRepeatSend(self, par):
        if type(par) == bool :
            self._repeatSend = par
        else:
            raise TypeError

    def isRepeatSend(self):
        return self._repeatSend

    def setRepeatSendTime(self, par):
        if type(par) == int :
            self._repeatSendPar = par
        else:
            raise TypeError

    def getRepeatSendTime(self):
        return self._repeatSendPar


def serialScanPort():
    port_name = []
    port_list = list(serial.tools.list_ports.comports())
    for i in range(len(port_list)):
        port_name.append(port_list[i][0])
    return port_name

def serialPortSelect(serialclass, portname):
    serialclass.port = portname
    # serial port default open when set name
    serialclass.close()

def serialBaudRateSetting(serialclass, baudrate):
    serialclass.baudrate = int(baudrate)

def serialByteSizeSetting(serialclass, bytesize):
    BYTESIZEDICT = {'5':serial.FIVEBITS, '6':serial.SIXBITS,
                    '7':serial.SEVENBITS,'8':serial.EIGHTBITS}
    serialclass.bytesize = BYTESIZEDICT[bytesize]
    #serialclass.bytesize = int(bytesize)

def serialCheckoutBitSetting(serialclass, checkoutbit):
    CHECKOUTBITDICT = {'None':serial.PARITY_NONE, 'Even':serial.PARITY_EVEN,
                       'Odd':serial.PARITY_ODD, 'Mark':serial.PARITY_MARK,
                       'Space':serial.PARITY_SPACE}
    serialclass.parity = CHECKOUTBITDICT[checkoutbit]

def serialStopBitsSetting(serialclass, stopbits):
    STOPBITSDICT = {'1':serial.STOPBITS_ONE, '1.5':serial.STOPBITS_ONE_POINT_FIVE,
                    '2':serial.STOPBITS_TWO}
    serialclass.stopbits = STOPBITSDICT[stopbits]

def serialFlowControlSetting(serialclass, flowcontrolpar):
    if flowcontrolpar == r'RTS/CTS':
        serialclass.rtscts = True
        serialclass.xonxoff = False
    elif flowcontrolpar == r'XON/OFF':
        serialclass.rtscts = False
        serialclass.xonxoff = True
    elif flowcontrolpar == 'None':
        serialclass.rtscts = False
        serialclass.xonxoff = False

def serialRepeatSend(boolpar):
    pass

def serialPortOpen(serialclass, serialsendsetclass, serialrecievesetclass):
    if serialclass.isOpen() == True and serialsendsetclass.getSendSwitch() == True and serialrecievesetclass.getRecieveSwitch() == False :
        serialrecievesetclass.setRecieveSwitch(True)
        return 'DataRecieveContinue'
    if serialclass.isOpen() == False:
        try:
            serialclass.open()
        except Exception as e:
            print(e)
            return False
    if serialsendsetclass.getSendSwitch() == False:
        serialsendsetclass.setSendSwitch(True)
    if serialrecievesetclass.getRecieveSwitch() == False:
        serialrecievesetclass.setRecieveSwitch(True)
    return True

def serialPortShutDown(serialclass, serialsendsetclass, serialrecievesetclass):
    if serialclass.isOpen() == True:
        serialclass.close()
    if serialsendsetclass.getSendSwitch() == True:
        serialsendsetclass.setSendSwitch(False)
    if serialrecievesetclass.getRecieveSwitch() == True:
        serialrecievesetclass.setRecieveSwitch(False)

def serialSendData(serialclass, serialsendsetclass, tarstring):
    if serialclass.isOpen() == True:
        if serialsendsetclass.getSendSwitch() == True:
            if serialsendsetclass.getSendMode() == 'ASCII':
                serialsendsetclass.txByteCount += serialclass.write(tarstring.encode('ascii'))
                return True
            elif serialsendsetclass.getSendMode() == 'Hex':
                import re
                stringre = re.match(r'([0-9])+', tarstring)
                if stringre  != None :
                    waittoencode = input_hex2ascii(stringre.group(0))
                    serialsendsetclass.txByteCount += serialclass.write(waittoencode.encode('ascii'))
                    return True
                else:
                    return False
        else:
            return False
    else:
        return False

def serialRecieveDataThread(serialclass, serialrecieveclass):
    serialrecieveclass.writeBuffer(serialclass.read(serialclass.in_waiting))


def input_hex2ascii(string):
    temstrint = ''
    while len(string)>1:
        temstrint += chr(int(string[:2]))
        string = string[2:]
    return temstrint




